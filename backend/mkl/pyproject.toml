[build-system]
requires = ["scikit-build-core", "pybind11"]
build-backend = "scikit_build_core.build"

[project]
name = "osqp-mkl"
dynamic = ["version"]
description = "OSQP: The Operator Splitting QP Solver"
requires-python = ">=3.8"
authors = [
    { name = "Bartolomeo Stellato", email = "bartolomeo.stellato@gmail.com" },
    { name = "Goran Banjac" },
    { name = "Vineet Bansal", email = "vineetbansal@protonmail.com" },
    { name = "Amit Solomon", email = "as3993@princeton.edu" },
    { name = "Henry Schreiner", email = "HenrySchreinerIII@gmail.com" },
]
dependencies = [
    "osqp>=1.0.0a0",
]

[project.urls]
Homepage = "https://osqp.org/"

[dependency-groups]
# Exclude scipy 1.12 because the random sparse array function started returning
# the transpose of the original, breaking the unit tests. This was fixed in 1.13.0.
# This shouldn't actually affect the users, so there shouldn't be a need to exclude
# 1.12 on a user's machine.
# ref: https://github.com/scipy/scipy/issues/20027
test = ["pytest>=6", "scipy!=1.12.0"]

[tool.scikit-build]
install.components = ["python"]
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
minimum-version = "0.8"
cmake.source-dir = "../.."

[tool.scikit-build.cmake.define]
OSQP_ALGEBRA_BACKEND = "mkl"
OSQP_EXT_MODULE_NAME = "osqp_mkl"

[tool.cibuildwheel]
build = "cp3*"
skip = ["cp36-*", "cp37-*", "*-win32", "*-manylinux_i686", "*-musllinux_*"]
build-verbosity = 1
before-build = "rm -rf {package}/osqp_sources/build"
# Install CPU-only version of torch beforehand since that allows cibuildwheel
# to satisfy the "test" dependency group install, but much faster. The runtime
# cost of torch-based osqp tests are considered negligible so torch-cpu is ok.
before-test = "pip install torch --index-url https://download.pytorch.org/whl/cpu"
test-groups = ["test"]
test-command = "python -m pytest -s {project}/src/osqp/tests"

[tool.cibuildwheel.linux]
before-all = [
  "yum-config-manager --add-repo https://yum.repos.intel.com/oneapi",
  "rpm --import https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB",
  "yum --nogpgcheck install -y intel-oneapi-mkl-devel-2023.0.0"
]
environment = { MKL_ROOT = "/opt/intel/oneapi/mkl/latest" }
repair-wheel-command = ""

[tool.cibuildwheel.macos]
# 02/13/25 - Skip testing on cp313-macosx_x86_64 because torch/numpy deps are unsatisfiable
test-skip = "cp313-macosx_x86_64"
before-all = [
  # See https://github.com/oneapi-src/oneapi-ci for installer URLs
  "wget -q https://registrationcenter-download.intel.com/akdlm/IRC_NAS/cd013e6c-49c4-488b-8b86-25df6693a9b7/m_BaseKit_p_2023.2.0.49398.dmg",
  "hdiutil attach -noverify -noautofsck m_BaseKit_p_2023.2.0.49398.dmg",
  "sudo /Volumes/m_BaseKit_p_2023.2.0.49398/bootstrapper.app/Contents/MacOS/bootstrapper --silent --eula accept --components intel.oneapi.mac.mkl.devel",
  "pip install 'cmake==3.18.4'"
]
environment = { MKL_ROOT = "/opt/intel/oneapi/mkl/latest" }
repair-wheel-command = ""

[tool.cibuildwheel.windows]
before-all = "pip install delvewheel"
environment = { MKL_ROOT = "C:/Program Files (x86)/Intel/oneAPI/mkl/latest", MKL_DIR = "C:/Program Files (x86)/Intel/oneAPI/mkl/latest/lib/cmake/mkl" }
repair-wheel-command = "delvewheel repair {wheel} --wheel-dir {dest_dir} --no-mangle-all --add-path \"C:/Program Files (x86)/Intel/oneAPI/mkl/latest/redist/intel64\" --add-dll \"mkl_sequential.2.dll;mkl_def.2.dll;mkl_intel_thread.2.dll\""

[tool.setuptools_scm]
root = "../.."
