name: Build Default

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  build_sdist:
    name: Build source
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@master
      with:
        submodules: 'recursive'

    - name: Build source
      run: |
        python -m pip install build
        python -m build --sdist --outdir=wheelhouse

    - name: Upload sdist to github
      uses: actions/upload-artifact@v4
      with:
        name: wheels-sdist
        path: wheelhouse/*.tar.gz
        if-no-files-found: error

  build_wheels:
    name: Build wheel on ${{ matrix.os }} for ${{ matrix.cibw_archs }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cibw_archs: "x86_64"
          - os: ubuntu-latest
            cibw_archs: "aarch64"
          - os: windows-2022
            cibw_archs: "auto64"
          # Include macos-13 to get Intel x86_64 macs and maos-latest to get the Aaarch64 macs
          - os: macos-13
            cibw_archs: "x86_64"
          - os: macos-latest
            cibw_archs: "arm64"

    steps:
    - uses: actions/checkout@master

    # This might not be necessary once ARM runners become available for general use
    - name: Set up QEMU
      if: matrix.cibw_archs == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.21
      with:
        output-dir: wheelhouse
      env:
        CIBW_BUILD: "cp3*"
        # Temporarily skip 3.13 because it is still an RC and our dependencies aren't there yet
        CIBW_SKIP: "cp36-* cp37-* *-win32 *-manylinux_i686 *-musllinux_* cp313-*"
        # Clean the build directory between builds
        CIBW_BEFORE_BUILD: >-
          rm -rf {package}/osqp_sources/build
        CIBW_TEST_COMMAND: "python -m pytest -s {project}/src/osqp/tests"
        CIBW_ENVIRONMENT_MACOS: CMAKE_OSX_ARCHITECTURES=${{ matrix.cibw_archs }}
        CIBW_BUILD_VERBOSITY: 1

    - name: Upload artifacts to github
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ runner.os }}-${{ matrix.cibw_archs }}
        path: ./wheelhouse/*.whl
        if-no-files-found: error

  publish_to_pypi:
    name: Publish wheels to PyPi
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: [build_sdist, build_wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Print out packages
        run: ls -la dist/*

      - name: Upload wheels to pypi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          TWINE_REPOSITORY: testpypi
        run: |
          python -m pip install --upgrade twine
          twine upload dist/*
